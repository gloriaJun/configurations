[user]
	name = gloriaJun
	email = pureainu@gmail.com
[includelf "gitdir:/Volumes/data/trabajo/"]
	path = .gitconfig-work
[alias]
	alias = "!git config --list | egrep '^alias.+' | sed -e 's/^alias\\.//' | sed -e 's/^[^=]*=/\\'$'\\033[31m&\\033[(B\\033[m/'"

# basic
	s = status -s
	co = checkout
	ci = commit
	br = branch
	cp = cherry-pick
	cpn = cherry-pick -n

#------------------------
## custom alias
#------------------------
	# get current branch name
	b0 = "!git rev-parse --abbrev-ref HEAD"
	# backup current branch
	back = "echo created new branch: backup-`git b0`;\
        git branch backup-`git b0`"

	# branch sync with remote (ex. git sync upstream)
	sync = "!f() { git fetch --all --prune && git reset --hard $1/$(git b0); }; f"

#------------------------
## log
#------------------------
	l = log --color --graph --date=short --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cd)%C(bold blue)<%an>%Creset' --abbrev-commit	
	la = log --all --branches --color --graph --date=short --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cd)%C(bold blue)<%an>%Creset' --abbrev-commit	
	# Show log graph | head
	lh = "!f() { \
            if [ $# = 0 ]; then \
                git l | head -n 25; \
            else \
                git l | head -n $1; \
            fi; \
            echo ''; \
        }; f"

#------------------------
## branch selector
#------------------------
	bb = "!# Branch tools. Type 'git bb help'.;\n\
        f() { \n\
            if [ $# = 0 ]; then \
                git branch-select | xargs git checkout; \
            elif [ $1 = 'help' ]; then \
                echo 'git bb           : Select and checkout branch'; \
                echo 'git bb c, clean  : Clean all merged branches'; \
                echo 'git bb d, D      : Delete seleted branches(D: force)'; \
                echo 'git bb l, list   : List branches excluding the current branch'; \
                echo 'git bb m, merged : List merged branches excluding the current and master branches'; \
            elif [ $1 = 'd' -o $1 = 'D' ]; then \
                git branch -$1 $(git bb list | fzf -m | awk '{print $2}'); \
            elif [ $1 = 'clean' -o $1 = 'c' ]; then \
                git branch-clean; \
            elif [ $1 = 'list' -o $1 = 'l' ]; then \
                git branch-list; \
            elif [ $1 = 'merged' -o $1 = 'm' ]; then \
                git branch-merged; \
            elif [ $1 = 'select' -o $1 = 's' ]; then \
                git branch-select; \
            else \
                git bb help; \
            fi; \
        }; f"

	branch-list = "!# List the branches.;\n\
        git for-each-ref --format='%(HEAD) %(refname:short)|%(committerdate:relative)|%(authorname)' \
        | column -ts'|' \
        | sed 's/^ /./'"
    branch-select = "!# Select a branch.;\n\
        f() { \
            _height=$(stty size | awk '{print $1}');\
            git branch-list | fzf --preview \"git l {2} | head -n $_height\" | awk '{print $2}' | sed -E 's/^(remotes\\/)?(origin|upstream)\\///'; \
        }; f"
	branch-merged = "!git branch --merged | grep -v '^\\*\\|\\<master$' | grep -v ^\\*\\|\\<develop$'"
	branch-clean = "!# Search and delete merged branches.;\n\
        git branch -d $(git branch-merged) 2> /dev/null; \
        for branch in $(git branch-list | awk '{print $2}' | grep -v '^master$') ; do \
            if [ $(git l | grep $branch -c) -gt 0 ]; then \
                git l | egrep \"Merge.*$branch\\s\" -C 1; \
                read -p \"Delete $branch? [y|n] \" -r; \
                REPLY=${REPLY:-"n"}; \
                if [ $REPLY = \"y\" ]; then \
                    git branch -D $branch; \
                    echo \"\\033[32m$branch \\033[0mhas been\\033[31m deleted\\033[0m.\n\"; \
                fi; \
            fi; \
        done"
	# checkout branch
	ch = "!git bb $1"

#------------------------
## diff & stage
#------------------------
	# Select files and Add them.;\n\
	ac = "!git diff-select | xargs git add"
    # Select staged files and Unstage them.;\n\
    unstage = "!git diff-unselect | xargs git reset HEAD"
    # Print diff report.;\n\
    diff-info = "!fileA=/tmp/git-s-$(uuidgen); \
        fileB=/tmp/git-diff-$(uuidgen); \
        git s | awk '{print $2,$1}' > $fileA; \
        git diff --numstat | awk '{print $3,$1,$2}' > $fileB; \
        join -t' ' -a 1 $fileA $fileB | awk '{print $2, \"(+\"$3 \",-\"$4\")\", $1}' | sed 's/(+,-)/./; s/^\\([^?]\\) *\\./\\1 STAGED/' | column -t -s' ' ; \
        rm -f $fileA $fileB; \
    "
    diff-select = "!# Select changed files to add them.;\n\
        f() { \
            git diff-info \
            | egrep -v '[^?] *STAGED ' \
            | fzf -m --header \"$(git diff --shortstat)\" --preview \
                \"if [[ {1} == '??' ]]; then pygmentize {3}; else git diff --color=always {3}; fi\" \
            | awk '{print $3}'; \
        }; f"
 	diff-unselect = "!# Select staged files to unstage them.;\n\
        f() { \
            git diff-info \
            | egrep '[^?] *STAGED ' \
            | fzf -m --header \"$(git diff --shortstat)\" --preview \
                \"if [[ {1} == '??' ]]; then pygmentize {3}; else git diff --color=always --cached {3}; fi\" \
            | awk '{print $3}'; \
        }; f"

#------------------------
## stash
#------------------------
    # Select a stash item and Apply it.
    sa = "!git stash-op apply"
    # Select the stash items and Drop them.
    sd = "!for sid in $(git stash-select -m) ; do \
            git stash drop $sid; \
        done;"
    # List stash items.
    sl = "!git stash list --pretty=format:\"%C(red)%gd%C(reset) %C(green)(%cr) %C(reset)%s\""
    # Select a stash item and Pop it.
    sp= "!git stash-op pop"
    # Save changes into the stash stack.
    ss = "!git diff-info; \
        read -p \"save message: \" msg; \
        git stash save \"$msg\""
    stash-select = "!# Select stash item(s).;\n\
        f() { \
            git stash-list \
            | fzf --ansi $1 --preview \"git stash show -p {1} --color=always\" \
            | cut -d' ' -f1; \
        }; f"
	stash-op = "!#A private stash tool.;\nf() { git stash-select | xargs git stash $1; }; f"

#------------------------
## git-flow
#------------------------
	fs = flow feature start
	fp = "!git flow feature publish `git b0 | sed -E 's/^feature\\///'`"
